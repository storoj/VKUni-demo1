// +++++++++  Превращение UIViewController в UICollectionViewController

- (void)loadView {
    UICollectionView *collectionView = [[UICollectionView alloc] initWithFrame:CGRectZero collectionViewLayout:[UICollectionViewFlowLayout new]];
    collectionView.dataSource = self;
    collectionView.delegate = self;
    
    [collectionView registerClass:[PhotoCell class] forCellWithReuseIdentifier:kCellIdentifier];
    
    self.view = collectionView;
}

// +++++++++  DataSource для CollectionView

#pragma mark UICollectionViewDataSource

- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section {
    return [self.photos count];
}

- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath {
    return nil;
}

#pragma mark UICollectionViewDelegate

// +++++++++ Ячейка

static NSString *const kCellIdentifier = @"Cell";

@interface PhotoCell : UICollectionViewCell
@property (nonatomic, strong) UIImageView *imageView;
@end

@implementation PhotoCell

- (instancetype)initWithFrame:(CGRect)frame {
    self = [super initWithFrame:frame];
    if (self) {
        _imageView = [[UIImageView alloc] initWithFrame:self.contentView.bounds];
        _imageView.contentMode = UIViewContentModeScaleAspectFill;
        _imageView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
        _imageView.backgroundColor = [UIColor lightGrayColor];
        [self.contentView addSubview:_imageView];
    }
    return self;
}

@end

// +++++++++ массив фотографий

@interface ViewController () <UICollectionViewDataSource, UICollectionViewDelegate>
@property (nonatomic, strong) NSMutableArray *photos;
@end

- (instancetype)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil {
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        _photos = [NSMutableArray array];
    }
    return self;
}


// +++++++++ Возврат ячейки

- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath {
    PhotoCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:kCellIdentifier forIndexPath:indexPath];
    return cell;
}

// +++++++++ Загрузка данных
#import <VKSdkFramework/VKSdk.h>

#pragma mark Data Loading

- (void)loadPhotosWithOffset:(NSInteger)offset count:(NSInteger)count {
    VKRequest *request = nil; // TODO
    
    [request executeWithResultBlock:^(VKResponse *response) {
        VKPhotoArray *photosArray = response.parsedModel;
        [self.photos addObjectsFromArray:photosArray.items];
        [self.collectionView reloadData];
    } errorBlock:^(NSError *error) {
        NSLog(@"Error: %@", error);
    }];
}

- (void)loadNextPhotos {
    [self loadPhotosWithOffset:[self.photos count] count:20];
}

- (void)collectionView:(UICollectionView *)collectionView willDisplayCell:(UICollectionViewCell *)cell forItemAtIndexPath:(NSIndexPath *)indexPath {
    if (indexPath.item >= self.photos.count-10) {
        [self loadNextPhotos];
    }
}

// ++++++++++ Ман
// https://vk.com/dev/photos.getUserPhotos

// ++++++++++ Запрос

    VKRequest *request = [[VKApi photos] prepareRequestWithMethodName:@"getUserPhotos"
                                                        andParameters:@{
                                                                        @"user_id" : @(34),
                                                                        @"offset" : @(offset),
                                                                        @"count" : @(count),
                                                                        @"sort" : @(0),
                                                                        @"photo_sizes" : @(1)
                                                                        }
                                                        andHttpMethod:@"POST"
                                                      andClassOfModel:[VKPhotoArray class]];



// +++++++++ Показ фотографий

    VKPhoto *photo = self.photos[indexPath.item];
    VKPhotoSize *photoSize = [photo.sizes photoSizeWithType:@"x"];
    NSString *urlString = photoSize.src;
    
    if (urlString) {
        [NSURLConnection sendAsynchronousRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:urlString]]
                                           queue:[NSOperationQueue mainQueue]
                               completionHandler:^(NSURLResponse * _Nullable response, NSData * _Nullable data, NSError * _Nullable connectionError) {
                                   if (data) {
                                       dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
                                           UIImage *image = [UIImage imageWithData:data];
                                           if (image) {
                                               dispatch_async(dispatch_get_main_queue(), ^{
                                                   cell.imageView.image = image;
                                               });
                                           }
                                       });
                                   }
                               }];
    }

// +++++++++++ PhotosLayout.h

@import UIKit;

@class PhotosLayout;

@protocol UICollectionViewDelegatePhotosLayout <NSObject>
- (CGFloat)photoLayout:(PhotosLayout *)layout aspectRatioForItemAtIndexPath:(NSIndexPath *)indexPath;
@end

@interface PhotosLayout : UICollectionViewLayout
@end

// ++++++++++ PhotosLayout.m

#import "PhotosLayout.h"

@implementation PhotosLayout

- (void)prepareLayout {
    
}

- (NSArray<UICollectionViewLayoutAttributes *> *)layoutAttributesForElementsInRect:(CGRect)rect {
    return nil;
}

- (CGSize)collectionViewContentSize {
    return CGSizeZero;
}

@end

// +++++++++++ PhotosLayout.h
#import "ThumbnailsLayout.h"
@implementation PhotosLayout
{
    NSArray *_attributes;
    CGSize _size;
}

// ViewController.m

#pragma mark PhotosLayout

- (CGFloat)photoLayout:(PhotosLayout *)layout aspectRatioForItemAtIndexPath:(NSIndexPath *)indexPath {
    VKPhoto *photo = self.photos[indexPath.item];
    
    VKPhotoSize *size = [photo.sizes photoSizeWithType:@"x"];
    const CGFloat w = [size.width doubleValue];
    const CGFloat h = [size.height doubleValue];
    
    if (w > 0 && h > 0) {
        return w/h;
    } else {
        return 1.f;
    }
}

// +++++++++ NSArray+Functional.h

- (void)enumerateSlicesOfCount:(NSUInteger)count withBlock:(void(^)(NSUInteger idx, NSArray <T>*slice))block;

// .m

- (void)enumerateSlicesOfCount:(NSUInteger)count withBlock:(void(^)(NSUInteger idx, NSArray *slice))block {
    const NSUInteger numberOfItems = [self count];
    if (numberOfItems == 0) {
        return;
    }
    
    NSRange range = NSMakeRange(0, 0);
    NSUInteger idx = 0;
    do {
        range.location += range.length;
        if (range.location < numberOfItems) {
            range.length = MIN(count, numberOfItems-range.location);
            
            if (range.length > 0) {
                block(idx++, [self subarrayWithRange:range]);
            }
        }
        
    } while (range.location < numberOfItems);
}

// +++++++++++++ PhotosLayout.m

@interface ThumbnailDescription : NSObject <ThumbnailDescription>
@property (nonatomic, assign, readonly) CGFloat ratio;
@property (nonatomic, strong, readonly) NSIndexPath *indexPath;

- (instancetype)initWithRatio:(CGFloat)ratio indexPath:(NSIndexPath *)indexPath;
+ (instancetype)descriptionWithRatio:(CGFloat)ratio indexPath:(NSIndexPath *)indexPath;

@end

@implementation ThumbnailDescription
- (instancetype)initWithRatio:(CGFloat)ratio indexPath:(NSIndexPath *)indexPath {
    self = [super init];
    if (self) {
        _ratio = ratio;
        _indexPath = indexPath;
    }
    return self;
}

+ (instancetype)descriptionWithRatio:(CGFloat)ratio indexPath:(NSIndexPath *)indexPath {
    return [[self alloc] initWithRatio:ratio indexPath:indexPath];
}

@end


// +++++++++ PhotosLayout.m

- (void)prepareLayout {    
    const CGSize pageSize = self.collectionView.bounds.size;
    id<UICollectionViewDelegatePhotosLayout> delegate = (id)self.collectionView.delegate;
    
    const NSUInteger numberOfPhotos = [self.collectionView numberOfItemsInSection:0];
    const NSUInteger batchSize = 9;
    
    NSMutableArray *thumbnails = [NSMutableArray array];
    for (NSInteger i=0; i<numberOfPhotos; i++) {
        NSIndexPath *indexPath = [NSIndexPath indexPathForItem:i inSection:0];
        [thumbnails addObject:[ThumbnailDescription descriptionWithRatio:[delegate photoLayout:self aspectRatioForItemAtIndexPath:indexPath]
                                                               indexPath:indexPath]];
    }
    
    _size = CGSizeZero;
    
    NSMutableArray *attributes = [NSMutableArray array];
    [thumbnails enumerateSlicesOfCount:batchSize withBlock:^(NSUInteger batchIdx, NSArray *slice) {
        const CGFloat yOffset = _size.height + 10;
        
        EnumerateFramesForThumbnails(slice, pageSize, ^(NSUInteger idx, ThumbnailDescription *thumbnail, CGRect frame) {
            frame = CGRectOffset(frame, 0, yOffset);
            
            UICollectionViewLayoutAttributes *attrs = [UICollectionViewLayoutAttributes layoutAttributesForCellWithIndexPath:thumbnail.indexPath];
            attrs.frame = frame;
            
            [attributes addObject:attrs];
            
            _size.width = MAX(_size.width, CGRectGetMaxX(frame));
            _size.height = MAX(_size.height, CGRectGetMaxY(frame));
        });
    }];
    
    _attributes = [attributes copy];
}


// ++++++++++++++ PhotosLayout.m
@implementation PhotosLayout
{
    CGSize _size;
    NSArray <NSNumber *> *_offsets;
    NSArray <NSArray <UICollectionViewLayoutAttributes *>*>* _attributeGroups;
}


// prepareLayout
    NSMutableArray *attributeGroups = [NSMutableArray array];
    NSMutableArray *offsets = [NSMutableArray array];
    
    [thumbnails enumerateSlicesOfCount:batchSize withBlock:^(NSUInteger batchIdx, NSArray *slice) {
        const CGFloat yOffset = _size.height + 10;
        [offsets addObject:@(yOffset)];
        
        NSMutableArray *group = [NSMutableArray array];
        
        EnumerateFramesForThumbnails(slice, pageSize, ^(NSUInteger idx, ThumbnailDescription *thumbnail, CGRect frame) {
            frame = CGRectOffset(frame, 0, yOffset);
            
            UICollectionViewLayoutAttributes *attrs = [UICollectionViewLayoutAttributes layoutAttributesForCellWithIndexPath:thumbnail.indexPath];
            attrs.frame = frame;
            
            [group addObject:attrs];
            
            _size.width = MAX(_size.width, CGRectGetMaxX(frame));
            _size.height = MAX(_size.height, CGRectGetMaxY(frame));
        });
        
        [attributeGroups addObject:[group copy]];
    }];
    
    _attributeGroups = [attributeGroups copy];
    _offsets = [offsets copy];

//

- (NSArray<UICollectionViewLayoutAttributes *> *)layoutAttributesForElementsInRect:(CGRect)rect {
    if ([_offsets count] == 0) {
        return nil;
    }
    
    const NSUInteger idx = [_offsets indexOfObject:@(rect.origin.y)
                                     inSortedRange:NSMakeRange(0, [_offsets count])
                                           options:NSBinarySearchingInsertionIndex
                                   usingComparator:^NSComparisonResult(NSNumber *obj1, NSNumber *obj2) {
                                       return [obj1 compare:obj2];
                                   }];
    
    NSMutableArray *result = [NSMutableArray array];
    
    {
        NSUInteger bottomIdx = idx;
        while (bottomIdx < [_offsets count] && [_offsets[bottomIdx] doubleValue] < CGRectGetMaxY(rect)) {
            [result addObjectsFromArray:_attributeGroups[bottomIdx]];
            bottomIdx++;
        }
    }
    
    {
        NSInteger upperIdx = idx;
        while (upperIdx >= 0 && [_offsets[upperIdx] doubleValue] > CGRectGetMinY(rect)) {
            [result addObjectsFromArray:_attributeGroups[upperIdx]];
            upperIdx--;
        }
    }
    
    return [result copy];
}

